diff --git a/ps-printer-app.c b/ps-printer-app.c
index 18431bf..afa32a4 100644
--- a/ps-printer-app.c
+++ b/ps-printer-app.c
@@ -528,7 +528,7 @@ ps_compare_ppd_paths(void *a,
 static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
 					 pappl_pr_options_t *job_options)
 {
-  int                   i, j, count;
+  int                   i, j, k, count;
   ps_driver_extension_t *extension;
   ps_job_data_t         *job_data;      // PPD data for job
   ppd_cache_t           *pc;
@@ -554,7 +554,10 @@ static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
   ppd_choice_t          *choice;        // Choice in PPD option
   ppd_attr_t            *ppd_attr;
   pwg_map_t             *pwg_map;
-  char                  *ptr;
+  ppd_coption_t         *coption = NULL;
+  char                  *param;
+  int                   num_cparams = 0;
+  char                  paramstr[1024];
   time_t t;
   filter_data_t         *filter_data;
   const char * const extra_attributes[] =
@@ -855,8 +858,18 @@ static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
 	    driver_data.num_vendor);
        i ++)
   {
-    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, "Adding option: %s",
-		extension->vendor_ppd_options[i]);
+    if ((param = strchr(extension->vendor_ppd_options[i], ':')) == NULL) {
+      papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, "Adding option: %s",
+		  extension->vendor_ppd_options[i]);
+      coption = NULL;
+      num_cparams = 0;
+      k = 0;
+    }
+    else
+    {
+      param ++;
+      papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, "  Custom parameter: %s", param);
+    }
     if ((attr = papplJobGetAttribute(job, driver_data.vendor[i])) == NULL ||
 	ippGetString(attr, 0, NULL) == NULL)
     {
@@ -868,47 +881,69 @@ static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
     if (attr)
     {
       if (ippGetValueTag(attr) == IPP_TAG_BOOLEAN)
-	ptr = strdup(ippGetBoolean(attr, 0) ? "True" : "False");
+	val = ippGetBoolean(attr, 0) ? "True" : "False";
       else
-	ptr = strdup(ippGetString(attr, 0, NULL));
-      snprintf(buf, sizeof(buf), "%s-supported", driver_data.vendor[i]);
-      attr = ippFindAttribute(driver_attrs, buf, IPP_TAG_ZERO);
-      if (attr == NULL)
-      {
-	// Should never happen
-	papplLogJob(job, PAPPL_LOGLEVEL_ERROR,
-		    "  IPP Option not correctly registered (bug), "
-		    "skipping ...");
-	continue;
-      }
-      option = ppdFindOption(job_data->ppd, extension->vendor_ppd_options[i]);
-      if (option == NULL)
+	val = ippGetString(attr, 0, NULL);
+      if (param)
       {
-	// Should never happen
-	papplLogJob(job, PAPPL_LOGLEVEL_ERROR,
-		    "  PPD Option not correctly registered (bug), "
-		    "skipping ...");
-	continue;
+	if (!option || !coption || num_cparams <= 0 || k >= num_cparams)
+	  continue;
+	if (num_cparams == 1)
+	  snprintf(paramstr, sizeof(paramstr) - 1, "Custom.%s", val);
+	else
+	{
+	  if (k == 0)
+	  {
+	    paramstr[0] = '{';
+	    paramstr[1] = '\0';
+	  }
+	  snprintf(paramstr + strlen(paramstr),
+		   sizeof(paramstr) - strlen(paramstr) - 1,
+		   "%s=%s ", param, val);
+	  if (k == num_cparams - 1)
+	    paramstr[strlen(paramstr) - 1] = '}';
+	}
+	if (k == num_cparams - 1)
+	  job_data->num_options =
+	    cupsAddOption(option->keyword, paramstr, job_data->num_options,
+			  &(job_data->options));
+	k ++;
       }
-      for (j = 0;
-	   j < (ippGetValueTag(attr) == IPP_TAG_BOOLEAN ?
-		2 : ippGetCount(attr));
-	   j ++)
+      else
       {
-	ppdPwgUnppdizeName(option->choices[j].text, buf, sizeof(buf), NULL);
-	if (!strcasecmp(buf, ptr))
-	{
-	  choicestr = option->choices[j].choice;
-	  break;
+	option = ppdFindOption(job_data->ppd, extension->vendor_ppd_options[i]);
+	if (option == NULL)
+        {
+	  // Should never happen
+	  papplLogJob(job, PAPPL_LOGLEVEL_ERROR,
+		      "  PPD Option not correctly registered (bug), "
+		      "skipping ...");
+	  continue;
 	}
+	for (j = 0;
+	     j < (ippGetValueTag(attr) == IPP_TAG_BOOLEAN ?
+		  2 : option->num_choices);
+	     j ++)
+        {
+	  ppdPwgUnppdizeName(option->choices[j].text, buf, sizeof(buf), NULL);
+	  if (!strcasecmp(buf, val))
+	  {
+	    choicestr = option->choices[j].choice;
+	    break;
+	  }
+	}
+	if (choicestr != NULL &&
+	    !ppdInstallableConflict(job_data->ppd,
+				    extension->vendor_ppd_options[i],
+				    choicestr) &&
+	    (strcasecmp(choicestr, "Custom") ||
+	     (coption =
+	      ppdFindCustomOption(job_data->ppd, option->keyword)) == NULL ||
+	     (num_cparams = cupsArrayCount(coption->params)) <= 0))
+	    job_data->num_options =
+	      cupsAddOption(option->keyword, choicestr, job_data->num_options,
+			    &(job_data->options));
       }
-      if (choicestr != NULL &&
-	  !ppdInstallableConflict(job_data->ppd,
-				  extension->vendor_ppd_options[i], choicestr))
-	job_data->num_options = cupsAddOption(extension->vendor_ppd_options[i],
-					      choicestr, job_data->num_options,
-					      &(job_data->options));
-      free(ptr);
     }
   }
 
@@ -918,10 +953,10 @@ static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
 			    "multiple-document-handling")) != NULL)
   {
     papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, "Adding option: Collate");
-    ptr = (char *)ippGetString(attr, 0, NULL);
-    if (strstr(ptr, "uncollate"))
+    val = ippGetString(attr, 0, NULL);
+    if (strstr(val, "uncollate"))
       choicestr = "False";
-    else if (strstr(ptr, "collate"))
+    else if (strstr(val, "collate"))
       choicestr = "True";
     job_data->num_options = cupsAddOption("Collate", choicestr,
 					  job_data->num_options,
@@ -935,8 +970,8 @@ static ps_job_data_t *ps_create_job_data(pappl_job_t *job,
   // some CUPS filters or filter functions
   for (i = 0; extra_attributes[i]; i ++)
     if ((attr = papplJobGetAttribute(job, extra_attributes[i])) != NULL &&
-	(ptr = (char *)ippGetString(attr, 0, NULL)) != NULL)
-      job_data->num_options = cupsAddOption(extra_attributes[i], ptr,
+	(val = ippGetString(attr, 0, NULL)) != NULL)
+      job_data->num_options = cupsAddOption(extra_attributes[i], val,
 					    job_data->num_options,
 					    &(job_data->options));
 
@@ -1297,6 +1332,64 @@ static const char *ps_default_paper_size()
 }
 
 
+static void
+ps_set_installable_options(ipp_t *driver_attrs,
+			   const char *options)
+{
+  if (!driver_attrs)
+    return;
+
+  ippDeleteAttribute(driver_attrs,
+		     ippFindAttribute(driver_attrs,
+				      "installable-options-default",
+				      IPP_TAG_ZERO));
+  if (options)
+    ippAddOctetString(driver_attrs, IPP_TAG_PRINTER,
+		      "installable-options-default", options, strlen(options));
+}
+
+
+static const char*
+ps_get_installable_options(ipp_t *driver_attrs,
+			   char *buf,
+			   int bufsize)
+{
+  char *str;
+  int len;
+  ipp_attribute_t *attr;
+
+
+  if (!driver_attrs)
+    return (NULL);
+
+  if ((attr = ippFindAttribute(driver_attrs, "installable-options-default",
+			       IPP_TAG_ZERO)) == NULL)
+    return (NULL);
+
+  if (ippGetValueTag(attr) == IPP_TAG_STRING)
+  {
+    // We cannot use ippAttributeString() with an octet string
+    // attribute, as it quotes spaces with '\'.
+    str = ippGetOctetString(attr, 0, &len);
+    if (len > bufsize - 1)
+      len = bufsize - 1;
+    strncpy(buf, str, len);
+    buf[len] = '\0';
+    return (buf);
+  }
+  else if (ippGetValueTag(attr) == IPP_TAG_TEXT)
+  {
+    // Transition from older version of ps-printer-app
+    ippAttributeString(attr, buf, bufsize);
+    // Update attribute to new format
+    ps_set_installable_options(driver_attrs, buf);
+    return (buf);
+  }
+
+  return (NULL);
+}
+
+
 //
 // 'ps_driver_setup()' - PostScript driver setup callback.
 //
@@ -1368,14 +1461,19 @@ ps_driver_setup(
   pwg_map_t    *pwg_map;
   pwg_size_t   *pwg_size;
   ppd_pwg_finishings_t *finishings;
+  ppd_coption_t *coption;
+  ppd_cparam_t *cparam;
+  int          num_cparams;
   pappl_media_col_t tmp_col;
   int          count;
   bool         pollable;
   char         buf[1024],
                ipp_opt[80],
-               ipp_supported[128],
-               ipp_default[128],
-               ipp_choice[80];
+               ipp_supported[256],
+               ipp_default[256],
+               ipp_choice[80],
+               ipp_custom_opt[192],
+               ipp_param[80];
   char         **choice_list;
   int          default_choice,
                first_choice;
@@ -1589,10 +1687,8 @@ ps_driver_setup(
   // configuration.
 
   // Get settings of the "Installable Options" from the previous session
-  if (*driver_attrs &&
-      (attr = ippFindAttribute(*driver_attrs, "installable-options-default",
-			       IPP_TAG_ZERO)) != NULL &&
-      ippAttributeString(attr, buf, sizeof(buf)) > 0)
+  if (ps_get_installable_options(*driver_attrs, buf, sizeof(buf)) &&
+      buf[0])
   {
     options = NULL;
     num_options = cupsParseOptions(buf, 0, &options);
@@ -2259,9 +2355,15 @@ ps_driver_setup(
          j > 0;
          j --, option ++)
     {
-      // Does the option have less than 2 choices? Then it does not make
-      // sense to let it show in the web interface
-      if (option->num_choices < 2)
+      // Does the option allow custom values?
+      num_cparams = 0;
+      if ((coption = ppdFindCustomOption(ppd, option->keyword)) != NULL)
+	num_cparams = cupsArrayCount(coption->params);
+
+      // Does the option have less than 2 choices and also does not
+      // allow custom values? Then it does not make sense to let it
+      // show in the web interface
+      if (option->num_choices < 2 && num_cparams == 0)
 	continue;
 
       // Can printer's default setting of this option be polled from the
@@ -2315,14 +2417,16 @@ ps_driver_setup(
 	  !ps_option_has_code(system, ppd, option))
 	continue;
 
-      // Stop and warn if we have no slot for vendor attributes any more
+      // Stop and warn if we have no slots for vendor attributes any more
       // Note that we reserve one slot for saving the "Installable Options"
       // in the state file
-      if (driver_data->num_vendor >= PAPPL_MAX_VENDOR - 1)
+      // We also take into account here that each custom parameter for this
+      // option requires one additional vendor option
+      if (driver_data->num_vendor >= PAPPL_MAX_VENDOR - 1 - num_cparams)
       {
 	papplLog(system, PAPPL_LOGLEVEL_WARN,
-		 "Too many options in PPD file, \"%s\" will not be controllable!",
-		 option->keyword);
+		 "Too many options in PPD file, \"%s\" (\"%s\") will not be controllable!",
+		 option->keyword, option->text);
 	continue;
       }
 
@@ -2440,6 +2544,11 @@ ps_driver_setup(
 		       default_choice == l ? " (default)" : "");
 	      l ++;
 	    }
+	    else if (k == option->num_choices - 1 && num_cparams > 0)
+	      // Last choice is the "custom" choice if an option allows custom
+	      // values, if it is dropped, this option does not allow custom
+	      // values any more
+	      num_cparams = 0;
 	  if (l > 0 && default_choice < 0)
 	  {
 	    default_choice = 0;
@@ -2457,7 +2566,7 @@ ps_driver_setup(
 	  for (k = 0; k < l; k ++)
 	    free(choice_list[k]);
 	  free(choice_list);
-	  if (l < 2)
+	  if (l < 2 && num_cparams == 0)
 	  {
 	    papplLog(system, PAPPL_LOGLEVEL_DEBUG,
 		     "   -> Skipping - Option does not make sense with current accessory configuration");
@@ -2475,6 +2584,67 @@ ps_driver_setup(
 
       // Next entry ...
       driver_data->num_vendor ++;
+
+      // Does the option allow a custom value?
+      if (num_cparams == 0)
+	continue;
+
+      // Go through all custom parameters of the option
+      for (k = 0; k < num_cparams; k++)
+      {
+	cparam = (ppd_cparam_t *)cupsArrayIndex(coption->params, k);
+	// Name for extra vendor option to set this parameter
+	if (num_cparams == 1)
+	  snprintf(ipp_custom_opt, sizeof(ipp_custom_opt), "custom-%s", ipp_opt);
+	else
+	{
+	  ppdPwgUnppdizeName(cparam->text, ipp_param, sizeof(ipp_param), NULL);
+	  snprintf(ipp_custom_opt, sizeof(ipp_custom_opt), "custom-%s-for-%s",
+		   ipp_param, ipp_opt);
+	}
+	snprintf(ipp_supported, sizeof(ipp_supported), "%s-supported",
+		 ipp_custom_opt);
+	snprintf(ipp_default, sizeof(ipp_default), "%s-default",
+		 ipp_custom_opt);
+	// Create extra vendor option for each custom parameter, according to
+	// the data type
+	switch (cparam->type)
+	{
+	case PPD_CUSTOM_INT:
+	  if (!ippFindAttribute(*driver_attrs, ipp_default, IPP_TAG_ZERO))
+	    ippAddInteger(*driver_attrs, IPP_TAG_PRINTER, IPP_TAG_INTEGER,
+			  ipp_default,
+			  (cparam->minimum.custom_int <= 0 &&
+			   cparam->maximum.custom_int >= 0 ? 0 :
+			   (cparam->maximum.custom_int < 0 ?
+			    cparam->maximum.custom_int :
+			    cparam->minimum.custom_int)));
+	  if (!ippFindAttribute(*driver_attrs, ipp_supported, IPP_TAG_ZERO))
+	    ippAddRange(*driver_attrs, IPP_TAG_PRINTER, ipp_supported,
+			cparam->minimum.custom_int, cparam->maximum.custom_int);
+	  break;
+	case PPD_CUSTOM_STRING:
+	case PPD_CUSTOM_PASSCODE:
+	case PPD_CUSTOM_PASSWORD:
+	  if (!ippFindAttribute(*driver_attrs, ipp_default, IPP_TAG_ZERO))
+	    ippAddString(*driver_attrs, IPP_TAG_PRINTER, IPP_TAG_TEXT,
+			 ipp_default, NULL, "");
+	  break;
+	case PPD_CUSTOM_CURVE:
+	case PPD_CUSTOM_INVCURVE:
+	case PPD_CUSTOM_POINTS:
+	case PPD_CUSTOM_REAL:
+	case PPD_CUSTOM_UNKNOWN:
+	default:
+	  break;
+	}
+	// Add parameter vendor option to lookup lists
+	driver_data->vendor[driver_data->num_vendor] = strdup(ipp_custom_opt);
+	snprintf(buf, sizeof(buf), "%s:%s", option->keyword, cparam->name);
+	extension->vendor_ppd_options[driver_data->num_vendor] = strdup(buf);
+	// Next entry ...
+	driver_data->num_vendor ++;
+      }
     }
   }
 
@@ -2489,8 +2659,7 @@ ps_driver_setup(
     extension->vendor_ppd_options[driver_data->num_vendor] = NULL;
     driver_data->num_vendor ++;
     if (!update)
-      ippAddString(*driver_attrs, IPP_TAG_PRINTER, IPP_TAG_TEXT,
-		   "installable-options-default", NULL, "");
+      ps_set_installable_options(*driver_attrs, "");
   }
 
   return (true);
@@ -3391,9 +3560,8 @@ ps_printer_update_for_installable_options(
 
   // Get a copy of the driver IPP attributes to save the vendor option settings
   driver_attrs = papplPrinterGetDriverAttributes(printer);
-  if ((attr = ippFindAttribute(driver_attrs, "installable-options-default",
-			       IPP_TAG_ZERO)) != NULL &&
-      ippAttributeString(attr, buf, sizeof(buf)) > 0)
+  if (ps_get_installable_options(driver_attrs, buf, sizeof(buf)) &&
+      buf[0])
   {
     papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG,
 		    "Previous installable accessories settings: %s", buf);
@@ -3405,14 +3573,8 @@ ps_printer_update_for_installable_options(
 		    "Installable Options settings not found");
 
   // If we have new installable options settings update them in driver_attrs
-  if (instoptstr != buf)
-  {
-    if ((attr = ippFindAttribute(driver_attrs, "installable-options-default",
-				 IPP_TAG_ZERO)) != NULL)
-      ippDeleteAttribute(driver_attrs, attr);
-    ippAddString(driver_attrs, IPP_TAG_PRINTER, IPP_TAG_TEXT,
-		 "installable-options-default", NULL, instoptstr);
-  }
+  if (instoptstr && instoptstr != buf)
+    ps_set_installable_options(driver_attrs, instoptstr);
 
   // Update the driver data to correspond with the printer hardware
   // accessory configuration ("Installable Options" in the PPD)
@@ -3433,7 +3595,8 @@ ps_printer_update_for_installable_options(
       papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG,
 		      "Default setting for vendor option \"%s\" not found",
 		      driver_data.vendor[i]);
-    if (!strcmp(driver_data.vendor[i], "installable-options"))
+    if (ippGetValueTag(attr) == IPP_TAG_TEXT ||
+	!strcmp(driver_data.vendor[i], "installable-options"))
       continue;
     snprintf(buf, sizeof(buf), "%s-supported", driver_data.vendor[i]);
     attr = ippFindAttribute(driver_attrs, buf, IPP_TAG_ZERO);
@@ -3624,16 +3787,17 @@ ps_printer_web_device_config(
 	// Get current settings of the "Installable Options"
 	num_installables = 0;
 	installables = NULL;
-	if ((attr = ippFindAttribute(driver_attrs,
-				     "installable-options-default",
-				     IPP_TAG_ZERO)) != NULL)
+	if (ps_get_installable_options(driver_attrs, buf, sizeof(buf)))
 	{
-	  if (ippAttributeString(attr, buf, sizeof(buf)) > 0)
+	  if (buf[0])
 	  {
 	    num_installables = cupsParseOptions(buf, 0, &installables);
 	    ppdMarkOptions(ppd, num_installables, installables);
 	  }
-	  ippDeleteAttribute(driver_attrs, attr);
+	  ippDeleteAttribute(driver_attrs,
+			     ippFindAttribute(driver_attrs,
+					      "installable-options-default",
+					      IPP_TAG_ZERO));
 	}
 
 	// Join polled settings and mark them in the PPD
